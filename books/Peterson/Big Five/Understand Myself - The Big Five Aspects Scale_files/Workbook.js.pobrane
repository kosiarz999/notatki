/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

jQuery(function ($) {

    var showErrorMessage = function(msg) {
        //$('#ias-error-message p').text(msg);
        $('#ias-error-message p').html(msg);
        $('#ias-error-message').show();
    };

    var hideErrorMessage = function() {
        $('#ias-error-message p').text('');
        $('#ias-error-message').hide();
    };


    var buttonWaitState = function (button) {
        button.data('continue', button.text());
        button.text(button.data('please-wait'));
        button.attr('disabled', 'disabled');
    }

    var buttonContinueState = function(button) {
        button.text(button.data('continue'));
        button.removeAttr('disabled');
    }

//    var prepareAjaxParameters = function(form) {
//        var formData = form.serializeArray();
//        var paramters = {
//            type: form.attr("method"),
//            url: form.attr("action"), // the url where we want to POST
//            data: formData, // our data object
//            dataType: 'json', // what type of data do we expect back from the server
//            encode: true
//        };
//        return paramters;
//    }

    var submitFormAndGetProjectRunUrl = function(event) {
        event.preventDefault();
        var form = $(this);
        var button = form.find('button');
        buttonWaitState(button);
        $.ajax(Ias.prepareAjaxParameters(form))
            .done(function(data) {
                if (data.error) {
                    showErrorMessage(data.error);
                    buttonContinueState(button);
                    return;
                }
                var url = data.projectRunUrl;
                if (!url) {
                    showErrorMessage("Project run url is empty");
                    buttonContinueState(button);
                    return;
                }
                window.location.href = url;
            })
            .fail(function(jqxhr, textStatus, error) {
                showErrorMessage(error);
                buttonContinueState(button);
            })
//            .complete(function(jqxhr, textStatus) {
//                buttonContinueState(button);
//            })
        ;
    };

    $('#project-tag-resolver-form').submit(submitFormAndGetProjectRunUrl);

    $('#session-token-form').submit(submitFormAndGetProjectRunUrl);



});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIldvcmtib29rLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxBQUxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiV29ya2Jvb2suanMiLCJzb3VyY2VzQ29udGVudCI6WyJqUXVlcnkoZnVuY3Rpb24gKCQpIHtcclxuXHJcbiAgICB2YXIgc2hvd0Vycm9yTWVzc2FnZSA9IGZ1bmN0aW9uKG1zZykge1xyXG4gICAgICAgIC8vJCgnI2lhcy1lcnJvci1tZXNzYWdlIHAnKS50ZXh0KG1zZyk7XHJcbiAgICAgICAgJCgnI2lhcy1lcnJvci1tZXNzYWdlIHAnKS5odG1sKG1zZyk7XHJcbiAgICAgICAgJCgnI2lhcy1lcnJvci1tZXNzYWdlJykuc2hvdygpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgaGlkZUVycm9yTWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICQoJyNpYXMtZXJyb3ItbWVzc2FnZSBwJykudGV4dCgnJyk7XHJcbiAgICAgICAgJCgnI2lhcy1lcnJvci1tZXNzYWdlJykuaGlkZSgpO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgdmFyIGJ1dHRvbldhaXRTdGF0ZSA9IGZ1bmN0aW9uIChidXR0b24pIHtcclxuICAgICAgICBidXR0b24uZGF0YSgnY29udGludWUnLCBidXR0b24udGV4dCgpKTtcclxuICAgICAgICBidXR0b24udGV4dChidXR0b24uZGF0YSgncGxlYXNlLXdhaXQnKSk7XHJcbiAgICAgICAgYnV0dG9uLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGJ1dHRvbkNvbnRpbnVlU3RhdGUgPSBmdW5jdGlvbihidXR0b24pIHtcclxuICAgICAgICBidXR0b24udGV4dChidXR0b24uZGF0YSgnY29udGludWUnKSk7XHJcbiAgICAgICAgYnV0dG9uLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7XHJcbiAgICB9XHJcblxyXG4vLyAgICB2YXIgcHJlcGFyZUFqYXhQYXJhbWV0ZXJzID0gZnVuY3Rpb24oZm9ybSkge1xyXG4vLyAgICAgICAgdmFyIGZvcm1EYXRhID0gZm9ybS5zZXJpYWxpemVBcnJheSgpO1xyXG4vLyAgICAgICAgdmFyIHBhcmFtdGVycyA9IHtcclxuLy8gICAgICAgICAgICB0eXBlOiBmb3JtLmF0dHIoXCJtZXRob2RcIiksXHJcbi8vICAgICAgICAgICAgdXJsOiBmb3JtLmF0dHIoXCJhY3Rpb25cIiksIC8vIHRoZSB1cmwgd2hlcmUgd2Ugd2FudCB0byBQT1NUXHJcbi8vICAgICAgICAgICAgZGF0YTogZm9ybURhdGEsIC8vIG91ciBkYXRhIG9iamVjdFxyXG4vLyAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsIC8vIHdoYXQgdHlwZSBvZiBkYXRhIGRvIHdlIGV4cGVjdCBiYWNrIGZyb20gdGhlIHNlcnZlclxyXG4vLyAgICAgICAgICAgIGVuY29kZTogdHJ1ZVxyXG4vLyAgICAgICAgfTtcclxuLy8gICAgICAgIHJldHVybiBwYXJhbXRlcnM7XHJcbi8vICAgIH1cclxuXHJcbiAgICB2YXIgc3VibWl0Rm9ybUFuZEdldFByb2plY3RSdW5VcmwgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdmFyIGZvcm0gPSAkKHRoaXMpO1xyXG4gICAgICAgIHZhciBidXR0b24gPSBmb3JtLmZpbmQoJ2J1dHRvbicpO1xyXG4gICAgICAgIGJ1dHRvbldhaXRTdGF0ZShidXR0b24pO1xyXG4gICAgICAgICQuYWpheChJYXMucHJlcGFyZUFqYXhQYXJhbWV0ZXJzKGZvcm0pKVxyXG4gICAgICAgICAgICAuZG9uZShmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5lcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3dFcnJvck1lc3NhZ2UoZGF0YS5lcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uQ29udGludWVTdGF0ZShidXR0b24pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciB1cmwgPSBkYXRhLnByb2plY3RSdW5Vcmw7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXVybCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3dFcnJvck1lc3NhZ2UoXCJQcm9qZWN0IHJ1biB1cmwgaXMgZW1wdHlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uQ29udGludWVTdGF0ZShidXR0b24pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuZmFpbChmdW5jdGlvbihqcXhociwgdGV4dFN0YXR1cywgZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHNob3dFcnJvck1lc3NhZ2UoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uQ29udGludWVTdGF0ZShidXR0b24pO1xyXG4gICAgICAgICAgICB9KVxyXG4vLyAgICAgICAgICAgIC5jb21wbGV0ZShmdW5jdGlvbihqcXhociwgdGV4dFN0YXR1cykge1xyXG4vLyAgICAgICAgICAgICAgICBidXR0b25Db250aW51ZVN0YXRlKGJ1dHRvbik7XHJcbi8vICAgICAgICAgICAgfSlcclxuICAgICAgICA7XHJcbiAgICB9O1xyXG5cclxuICAgICQoJyNwcm9qZWN0LXRhZy1yZXNvbHZlci1mb3JtJykuc3VibWl0KHN1Ym1pdEZvcm1BbmRHZXRQcm9qZWN0UnVuVXJsKTtcclxuXHJcbiAgICAkKCcjc2Vzc2lvbi10b2tlbi1mb3JtJykuc3VibWl0KHN1Ym1pdEZvcm1BbmRHZXRQcm9qZWN0UnVuVXJsKTtcclxuXHJcblxyXG5cclxufSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
