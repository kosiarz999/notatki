const keyWords = ["Bezpieka",
				  	"collaboration",
				  	"atheism",
				  	"Act 447",
				  	"Agudas Achim",
				  	"Alenu",
				  	"antigoyism",
				  	"apartheid",
				  	"Armia Krajowa",
				  	"Aryanized Jews",
				  	"banditry",
				  	"Bismarck", 
				  	"Know Your Enemy",
				  	"Kielce Pogrom aftermath",
				  	"black market",	 	 	 	 	 	 
					"blood libel",
				  	"Chodakiewicz",	 	 	 	 	 
					"choiceless choices",
				  	"Davies", 
				  	"Zionism",
				  	"Holodomor",
					"Zionist",
					"definitive work", 	 	 	 	 	 	 
					"deicide",	 	 	 	 	 	 	 
					"Deutschblutigkeitserklarung",
				 	"drang nach osten",
				  	"efficacy of Polish guerrilla warfare",	 	 	 	 	 	 	 
					"Eizenstat",
				  	"bombshell",
					"elitism",	 	 	 	 	 	 	 
					"Engelking",	 	 	 	 	 	 	 
					"espionage",
				  	"Feliks Koneczny",	 	 	 	 	 	 	 
					"feudal",
				  	"freemasonry",	 	 	 	 	 	 	 
					"Germanless Holocaust",	 	 
				  	"Frydel",
				  	"Gontarczyk",	 	 	 	 	 	 	 
					"Goodbye Jews!",	 	 	 	 	 	 	 
					"goy",	 	 	 	 	 	 	 
					"gulag", 	
				  	"Holocaust obfuscation",
				  	"Holocaustianity", 	 	 	 	 	 	 
					"hyperinflation",	
				  	"insurrection",	 	
				   	"Jews 1968", 	
				  	"kapo", 	 	 	 	 	 	 
					"Katyn", 	 	 	 	 	 	 
					"Kedyw",	 	 	 	 	 	 
					"kehilla",	
				  	"Koneczny",	 	 	 	 	 	 	 
					"Kosciuszko",	 
				  	"Kurek",
				  	"lebensraum",	 	 	 	 	 	 
					"Lemkin",
				  	"Litvak",	 	 	 	 	 	 
					"Lukas", 	 	 	 	 	 	 
					"Lutoslawski",	 	
				  	"mischlinge", 
				  	"Noahide",
				  	"nomenklatura",	 
				  	"Nowak",
				  	"Nuremberg Laws",
				  	"osadnik",	 	 	 	 	 	 	 
					"otherization",	 
				  	"OZON",
				  	"Polak potrafi",	 	 	 	 	 	 	 
					"Polexit",
				  	"Polin Museum",
				  	"quisling", 	
				  	"smoking gun", 	 	 	 	 	 	 
					"Sommer",
				  	"Sunday closing",
				  	"Szonert",
				  	"tax cheating", 	 	 	 	 	 	 
					"Terezin Declaration",	 	 	 	 	 	 	 
					"Toledot Yeshu",	 	 	 	 	 	 	 
					"treyf",	 	 	 	 	 	 
					"Treitschke",	 		 	 	 	 	 
					"U. B.",	 	 	 	 	 	 
					"unequal victims",	 	 	 	 	 	 
					"untermenschen", 	 	 	 	 	 	 
					"UPA",	 	 	 	 	 	 	 
					"USHMM",
					"rabbinism",	 	 	 	 	 	 
					"racism",
				  	"Versailles",	 	 	 	 	 	 	 
					"vertriebene",	 	 	 	 	 	 	 
					"victimhood competition",	 	 	 	 	 	 
					"Volksdeutsche", 	 	 	 	 	 	 
					"voodoo numbers",	 		 	 	 	 	 
					"Wannsee",	 	 	 	 	 	 	 
					"Wawrzyniak",	 	 	 	 	 	 
					"Wehrmacht",	 	 	 	 	 	 	 
					"Wetzel",	 	 	 	 	 	 	 
					"Wilkomirski",	 	 	 	 	 	 	 
					"Wildhorn",	 	 	 	 	 	 	 
					"wirtschaft",	 	 	 	 	 	 	 
					"Wyszynski", 		 	 	 	 
					"xenophobia",	
				  	"ZZW",
				  	"Zebrowski",	 	 	 	 	 	 	 
					"zero sum game",	 	 	 	 	 	 	 
					"ZIH",
				  	"YIVO",	 	 	 	 	 	 	 
					"Yizkor",	 		 	 	 	 
					"Zaryn",
					"Yad Vashem",	 	 	 	 	 	 	 
					"Yalta",
				  	"rassenschande",	 	 	 	 	 	 	 
					"revolutionary banditry",	 	 	 	 	 	 	 
					"ritual murder",	 
					"Maimonides",	 
					"JPII",
					"intransigent", 	 	 	 	 	 	 
					"IPN",
					"iconoclasm",	 	 	 	 	 	 
					"immigration",
					"Hakata",	 	 	 	 	 	 	 
					"Hans Frank",	 	 	 	 	 	 
					"heroic narrative", 
				  	"Baudienst",
				  	"Blue Police",
				  	"Inquisition",
				  	"Policja Granatowa",
				  	"profiteering",
				  	"special rights",
				  	"szmalcowniki",
					"Bund",
					"Carmelite convent",
					"carousel",
					"censorship",
					"Cieszyn",
					"complicity",
					"cultural Marxism",
					"Dmowski",
					"double genocide",
					"draft dodging",
					"Duma",
					"European Union",
					"Finis Polonaie",
					"Gazeta Wyborcza",
					"Generalplan Ost",
					"German guilt dilution",
					"Germanophilia",
					"ghetto benches",
					"globalism",
					"Hlond",
					"Holocaust supremacism",
					"January 1863",
					"Jedwabne",
					"Judenrat",
					"Judeocentric",
					"Judeopolonia",
					"Kielce",
					"Kresy",
					"Lanzmann",
					"Liberum veto",
					"Maus",
					"medical school cadaver",
					"Michnik",
					"middleman",
					"Minorities Treaty",
					"Mitteleuropa",
					"Narutowicz",
					"nobility",
					"November 1830",
					"NSZ",
					"numerus clausus",
					"ONR",
					"Orwell",
					"OUN-UPA",
					"pedagogika wstydu",
					"Pilsudski",
					"Polokaust",
					"Popieluszko",
					"Propinacja",
					"Radio Maryja",
					"Schechita",
					"The Schindler's List",
					"SDKPiL",
					"Sikorski",
					"Soros",
					"Talmud",
					"Targowica",
					"Verhofstadt",
					"Yiddish",
					"Zbaszyn",
					"Zolnierze Wykleci",
					"Zydokomuna"];


function autocomplete(inp, arr) {
  /*the autocomplete function takes two arguments,
  the text field element and an array of possible autocompleted values:*/
  var currentFocus;
  /*execute a function when someone writes in the text field:*/
  inp.addEventListener("input", function(e) {
      var a, b, i, val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) { return false;}
      currentFocus = -1;
      /*create a DIV element that will contain the items (values):*/
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      /*append the DIV element as a child of the autocomplete container:*/
      this.parentNode.appendChild(a);
      /*for each item in the array...*/
      for (i = 0; i < arr.length; i++) {
        /*check if the item starts with the same letters as the text field value:*/
        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
          /*create a DIV element for each matching element:*/
          b = document.createElement("DIV");
          /*make the matching letters bold:*/
          b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
          b.innerHTML += arr[i].substr(val.length);
          /*insert a input field that will hold the current array item's value:*/
          b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
          /*execute a function when someone clicks on the item value (DIV element):*/
              b.addEventListener("click", function(e) {
              /*insert the value for the autocomplete text field:*/
              inp.value = this.getElementsByTagName("input")[0].value;
              /*close the list of autocompleted values,
              (or any other open lists of autocompleted values:*/
              closeAllLists();
          });
          a.appendChild(b);
        }
      }
  });
  /*execute a function presses a key on the keyboard:*/
  inp.addEventListener("keydown", function(e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/

        if (currentFocus > -1) {
		  e.preventDefault();
          /*and simulate a click on the "active" item:*/
          if (x) x[currentFocus].click();
		  currentFocus = -1;
        }
      }
  });
  function addActive(x) {
    /*a function to classify an item as "active":*/
    if (!x) return false;
    /*start by removing the "active" class on all items:*/
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    /*add class "autocomplete-active":*/
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    /*a function to remove the "active" class from all autocomplete items:*/
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
      x[i].parentNode.removeChild(x[i]);
    }
  }
}
	/*execute a function when someone clicks in the document:*/
	document.addEventListener("click", function (e) {
		closeAllLists(e.target);
	});
}